{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "142f456749c1f000",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Pj8WaxiWZ9vi"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('/content/energydata_complete.csv')"
      ],
      "metadata": {
        "id": "uhgqi5leagRR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "id": "moafcJ9ebTGk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# dropping the columns that will not contribute to our analysis i.e. Date\n",
        "df.drop([\"date\",\"lights\"], axis = 1, inplace = True)"
      ],
      "metadata": {
        "id": "kZFnFVWpmmC9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#normalizing the dataset\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "scaler = MinMaxScaler()\n",
        "df_scaled = pd.DataFrame(scaler.fit_transform(df),  columns = df.columns)\n",
        "\n",
        "\n",
        "X = df_scaled.drop(columns=['Appliances'])\n",
        "Y = df_scaled['Appliances']"
      ],
      "metadata": {
        "id": "QIZg28xQ0Pye"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#split the train and test data\n",
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)"
      ],
      "metadata": {
        "id": "nr2bRgDU0b9A"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#select a subset from the dataset\n",
        "subset_df = df[['T2', 'T6']]\n",
        "subset_df.head()"
      ],
      "metadata": {
        "id": "dnvFpIIN0gyt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# reshaping the subset\n",
        "x= subset_df['T2'].values.reshape(-1,1)\n",
        "y = subset_df['T6'].values.reshape(-1,1)\n",
        "\n",
        "xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.3, random_state=42)\n",
        "\n",
        "#linear model on sample of dataset\n",
        "from sklearn import linear_model\n",
        "lin_regr = linear_model.LinearRegression()\n",
        "lin_regr.fit(xtrain, ytrain)\n",
        "pred = lin_regr.predict(xtest)"
      ],
      "metadata": {
        "id": "k1hE1r8B0nh_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Coefficient of determination\n",
        "from sklearn.metrics import r2_score\n",
        "\n",
        "r2_score = r2_score(ytest, pred)\n",
        "print('R-squared:',(round(r2_score, 2)))"
      ],
      "metadata": {
        "id": "7S3hJKs00x-C"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn import linear_model\n",
        "\n",
        "regr = linear_model.LinearRegression()\n",
        "regr.fit(X_train, y_train)\n",
        "energy_pred = regr.predict(X_test)"
      ],
      "metadata": {
        "id": "sJXDETKO09OD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#mean absolute error\n",
        "from sklearn.metrics import mean_absolute_error\n",
        "mae = mean_absolute_error(y_test, energy_pred)\n",
        "print('Mnea absolute error:',(round(mae, 2)))\n",
        "\n",
        "#rss\n",
        "rss = np.sum(np.square(y_test - energy_pred))\n",
        "print('Residual SS:',(round(rss, 2)))\n",
        "\n",
        "#root mean squared error\n",
        "from sklearn.metrics import  mean_squared_error\n",
        "rmse = np.sqrt(mean_squared_error(y_test, energy_pred))\n",
        "print('RootMeanSquareError:',(round(rmse, 3)))\n",
        "\n",
        "#coefficient of determination\n",
        "from sklearn.metrics import r2_score\n",
        "r2_score = r2_score(y_test, energy_pred)\n",
        "print('R-squared:',(round(r2_score, 2)))"
      ],
      "metadata": {
        "id": "EYnEGn-v1GVJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def get_weights_df(model, feat, col_name):\n",
        "    \n",
        "  #this function returns the weight of every feature\n",
        "    weights = pd.Series(model.coef_, feat.columns).sort_values()\n",
        "    weights_df = pd.DataFrame(weights).reset_index()\n",
        "    weights_df.columns = ['Features', col_name]\n",
        "    weights_df[col_name].round(3)\n",
        "    \n",
        "    return weights_df"
      ],
      "metadata": {
        "id": "bw0q4EbO1TZf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "linear_model_weights = get_weights_df(regr, X_train, 'Linear_Model_Weight')\n",
        "linear_model_weights"
      ],
      "metadata": {
        "id": "K0e31p6Q1iMq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# ridge\n",
        "from sklearn.linear_model import Ridge\n",
        "\n",
        "ridge_reg = Ridge(alpha=0.4)\n",
        "ridge_reg.fit(X_train, y_train)\n",
        "\n",
        "#obtain predictions\n",
        "ridge_pred = ridge_reg.predict(X_test)"
      ],
      "metadata": {
        "id": "Q6b1V4Mg1kKT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#RMSE\n",
        "from sklearn.metrics import  mean_squared_error\n",
        "rmse = np.sqrt(mean_squared_error(y_test, ridge_pred))\n",
        "print('RMSE:',(round(rmse, 3)))"
      ],
      "metadata": {
        "id": "FYpjDIuu1o2x"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# lasso\n",
        "lasso_weights_df = get_weights_df(lasso_reg, X_train, 'Lasso_weight')\n",
        "lasso_weights_df\n",
        "\n",
        "#root mean squared error\n",
        "from sklearn.metrics import  mean_squared_error\n",
        "\n",
        "rmse = np.sqrt(mean_squared_error(y_test, lasso_pred))\n",
        "print('RMSE:',(round(rmse, 3)))"
      ],
      "metadata": {
        "id": "bxWbqwcN1rSy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "v2F8kbRb1y1B"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}